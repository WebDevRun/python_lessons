# Переменные типа string
# Строки являются неизменяемыми
# Строки можно заключать в в одинарные кавычки ('...') или двойные кавычки ("...") с одинаковым результатом
print('1) Присвоение переменой строку: ')

str_single_quotes = 'Hello'
str_double_quotes = "world"
str_from_num = str(7)
str_from_bool = str(True)
function_str = f'{54}'

print('str_single_quotes = ' + str_single_quotes + ' Тип переменной: ' + str(type(str_single_quotes)))
print('str_double_quotes = ' + str_double_quotes + ' Тип переменной: ' + str(type(str_double_quotes)))
print('str_from_num = ' + str_from_num + ' Тип переменной: ' + str(type(str_from_num)))
print('str_from_bool = ' + str_from_bool + ' Тип переменной: ' + str(type(str_from_bool)))
print('function_str = ' + function_str + ' Тип переменной: ' + str(type(function_str)))


# Строковые литералы могут занимать несколько строк.
# Одним из способов является использование тройных кавычек: ("""...""") или ('''...''').
# Конец строки автоматически включается в строку, но это можно предотвратить, добавив символ (\) в конце строки
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")

print('2) Специальные символы')
# Список специальных символов:
# \n - новая строка
print('Результат \\n: First line\nSecond line')
# \t - горизонтальный таб
print('Результат \\t: No tab\ttab')
# \r - возврат каретки
print('Результат \\r: Chercher\rTech')
# \b - возврат
print('Результат \\b: String for backspace!\b.')
# \f - подача формы
print('Результат \\f: herCher\fTech')
# \' - одинарная ковычка
print("Результат \\': Isn\'t, they said")
# \" - двойная кавычка
print('Результат \\": He said: \"Good day!\"')
# \\ - обратный слэш
print('Результат \\: \\Backslash\\')
# \v - вертикальный таб
print('Результат \\v: Vertical tab:\vTab string')
# \N - N это число символа Unicode
print('Результат \\N: \110\151')
# \xNN - NN-это шестнадцатеричное значение; \x используется для обозначения следующего шестнадцатеричного значения
print('Результат \\xNN: \x48\x69')
# другие ...

# Побочные эффекты
print('Побочныq эффект: C:\tome\name')

# Если вы не хотите, чтобы символы, перед которыми стоит (\), интерпретировались как специальные символы,
# вы можете использовать необработанные строки, добавив букву r перед первой кавычкой
print(r'Решение: C:\tome\name')
print()

# Конкатенация строк и их повтор
print('3) Конкатенация строк и их повтор')
print('Конкатенация строк: ' + str_single_quotes + ' ' + str_double_quotes)
print('Повтор строки 3 раза: ' + 3 * (str_single_quotes +' ') + 'world!\n')

print('4) Получение подстроки из строки\n')

word = 'Python'

print('''Индексация строк:
 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1    
''')

print('Получение буквы с индексом 0: ' + word[0])
print('Получение буквы с индексом 5: ' + word[5])
print('Получение буквы с индексом -1: ' + word[-1])
print('Получение буквы с индексом -6: ' + word[-6])
# Получение подстроки word[x:y] - x включительно, y не включительно
print('Получение подстроки с 0 до 2: ' + word[0:2])
print('Получение подстроки с 2 до 5: ' + word[2:5])
print('Получение подстроки с 2 до конца: ' + word[2:])
print('Получение подстроки с начала до 3: ' + word[:3])
print('Получение подстроки с 4 до 43: ' + word[4:43])
print('Получение подстроки с 43 до конца: ' + word[43:])
# Если вы хотите изменить строку, то по сути вы должны создать новую
print('Новая строка: J' + word[1:])
print('Новая строка: ' + word[:2] + 'py\n')

# Получение длины строки
print('4) Получение длины строки')
s = 'supercalifragilisticexpialidocious'
print(f'Длина строки {s} = {len(s)}\n')

# Основные методы строк
print('5) Основные методы строк')
# Метод capitalize возвращает копию строки с заглавными буквами ее первого символа, а остальные в нижнем регистре
print('Результат метода capitalize: ' + str_double_quotes.capitalize())
# Метод lower возвращает копию строки в нижнем регистре
print('Результат метода lower: ' + 'USA'.lower())
# Метод upper вовращает копию строки в нижнем регистре
print('Результат метода upper: ' + 'dna'.upper())